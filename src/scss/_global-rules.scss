//make root with light theme variables
:root {
  --body-background-color: #97d6b5;
  --container-background-color: #fbf9f3;
  --h1-color: #000;
  --navbar-span-color: #000;
  --navbar-svg-stroke: #6aab8b;
  --navbar-svg-fill: #6aab8b;
  --add-store-form-input-background-color: #eae8e4;
  --add-store-form-input-color: #5b515f;
  --button-background: linear-gradient(to left top in lch, #8dc693, #a2e1cb);
  --form-shadow-color: transparent;
  --toggle-theme-svgs-fill-color: #5b5146;
  --toggle-theme-background-color: #eae8e4;

  --main-transition: 0.4s;
}

//make body class with fark theme
.dark-theme {
  --body-background-color: #3d6953;
  --container-background-color: #3c3b38;
  --h1-color: #fff;
  --navbar-span-color: #fff;
  --navbar-svg-stroke: #36946b;
  --navbar-svg-fill: #36946b;
  --add-store-form-input-background-color: #32302d;
  --add-store-form-input-color: #eee;
  --button-background: linear-gradient(to left top in lch, #365a3b, #457364);
  --form-shadow-color: #0000004d;
  --toggle-theme-svgs-fill-color: #dad3cd;
  --toggle-theme-background-color: #32302d;
}

// make rules to run on whole website
* {
  font: {
    family: "Noto Sans", sans-serif;
  }
  box: {
    sizing: content-box;
  }
  transition: {
    duration: var(--main-transition);
    timing-function: ease-out;
  }
  margin: 0;
  padding: 0;
}

/// Mixin to apply CSS styles within a media query.
///
/// @param {String} $min-width - The minimum width for the media query (e.g. "600px").
/// @param {String|null} $max-width - The maximum width for the media query (e.g. "900px"). Optional.
/// @param {String} $class - The selector (class or element) to which styles will be applied.
/// @param {Map} $styles - A map of CSS properties and values to apply (e.g. (color: red, font-size: 16px)).
///
/// Usage example:
///   @include apply-style-with-media-query("600px", "900px", ".my-class", (color: red, font-size: 16px));
///
/// If $max-width is null or omitted, only min-width is applied.

@mixin apply-style-with-media-query($min-width, $max-width, $class, $styles) {
  @if $max-width != null {
    @media (min-width: #{$min-width}) and (max-width: #{$max-width}) {
      #{$class} {
        @each $property, $value in $styles {
          #{$property}: #{$value};
        }
      }
    }
  } @else {
    @media (min-width: #{$min-width}) {
      #{$class} {
        @each $property, $value in $styles {
          #{$property}: #{$value};
        }
      }
    }
  }
}
